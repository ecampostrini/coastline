diff -r 3a1db0d2747e Modules/posixmodule.c
--- a/Modules/posixmodule.c	Sun Nov 10 02:36:30 2013 -0500
+++ b/Modules/posixmodule.c	Fri Dec 13 15:36:45 2013 +0100
@@ -162,6 +162,19 @@
 #endif  /* ! __WATCOMC__ || __QNX__ */
 #endif /* ! __IBMC__ */
 
+
+#undef HAVE_OPENPTY
+#undef HAVE_FORKPTY
+#undef HAVE_DEV_PTMX
+#undef HAVE_DEV_PTC
+#undef HAVE_POPEN
+#undef HAVE_GETPPID
+#undef HAVE_GETUID
+#undef HAVE_GETEUID
+#undef HAVE_GETEGID
+#undef HAVE_EXECV
+#undef HAVE_TTYNAME
+
 #ifndef _MSC_VER
 
 #if defined(__sgi)&&_COMPILER_VERSION>=700
@@ -2913,161 +2926,8 @@
 static PyObject *
 posix_utime(PyObject *self, PyObject *args)
 {
-#ifdef MS_WINDOWS
-    PyObject *arg;
-    PyUnicodeObject *obwpath;
-    wchar_t *wpath = NULL;
-    char *apath = NULL;
-    HANDLE hFile;
-    time_t atimesec, mtimesec;
-    long ausec, musec;
-    FILETIME atime, mtime;
-    PyObject *result = NULL;
-
-    if (PyArg_ParseTuple(args, "UO|:utime", &obwpath, &arg)) {
-        wpath = PyUnicode_AS_UNICODE(obwpath);
-        Py_BEGIN_ALLOW_THREADS
-        hFile = CreateFileW(wpath, FILE_WRITE_ATTRIBUTES, 0,
-                            NULL, OPEN_EXISTING,
-                            FILE_FLAG_BACKUP_SEMANTICS, NULL);
-        Py_END_ALLOW_THREADS
-        if (hFile == INVALID_HANDLE_VALUE)
-            return win32_error_unicode("utime", wpath);
-    } else
-        /* Drop the argument parsing error as narrow strings
-           are also valid. */
-        PyErr_Clear();
-
-    if (!wpath) {
-        if (!PyArg_ParseTuple(args, "etO:utime",
-                              Py_FileSystemDefaultEncoding, &apath, &arg))
-            return NULL;
-        Py_BEGIN_ALLOW_THREADS
-        hFile = CreateFileA(apath, FILE_WRITE_ATTRIBUTES, 0,
-                            NULL, OPEN_EXISTING,
-                            FILE_FLAG_BACKUP_SEMANTICS, NULL);
-        Py_END_ALLOW_THREADS
-        if (hFile == INVALID_HANDLE_VALUE) {
-            win32_error("utime", apath);
-            PyMem_Free(apath);
-            return NULL;
-        }
-        PyMem_Free(apath);
-    }
-
-    if (arg == Py_None) {
-        SYSTEMTIME now;
-        GetSystemTime(&now);
-        if (!SystemTimeToFileTime(&now, &mtime) ||
-            !SystemTimeToFileTime(&now, &atime)) {
-            win32_error("utime", NULL);
-            goto done;
-        }
-    }
-    else if (!PyTuple_Check(arg) || PyTuple_Size(arg) != 2) {
-        PyErr_SetString(PyExc_TypeError,
-                        "utime() arg 2 must be a tuple (atime, mtime)");
-        goto done;
-    }
-    else {
-        if (extract_time(PyTuple_GET_ITEM(arg, 0),
-                         &atimesec, &ausec) == -1)
-            goto done;
-        time_t_to_FILE_TIME(atimesec, 1000*ausec, &atime);
-        if (extract_time(PyTuple_GET_ITEM(arg, 1),
-                         &mtimesec, &musec) == -1)
-            goto done;
-        time_t_to_FILE_TIME(mtimesec, 1000*musec, &mtime);
-    }
-    if (!SetFileTime(hFile, NULL, &atime, &mtime)) {
-        /* Avoid putting the file name into the error here,
-           as that may confuse the user into believing that
-           something is wrong with the file, when it also
-           could be the time stamp that gives a problem. */
-        win32_error("utime", NULL);
-        goto done;
-    }
-    Py_INCREF(Py_None);
-    result = Py_None;
-done:
-    CloseHandle(hFile);
-    return result;
-#else /* MS_WINDOWS */
-
-    char *path = NULL;
-    time_t atime, mtime;
-    long ausec, musec;
-    int res;
-    PyObject* arg;
-
-#if defined(HAVE_UTIMES)
-    struct timeval buf[2];
-#define ATIME buf[0].tv_sec
-#define MTIME buf[1].tv_sec
-#elif defined(HAVE_UTIME_H)
-/* XXX should define struct utimbuf instead, above */
-    struct utimbuf buf;
-#define ATIME buf.actime
-#define MTIME buf.modtime
-#define UTIME_ARG &buf
-#else /* HAVE_UTIMES */
-    time_t buf[2];
-#define ATIME buf[0]
-#define MTIME buf[1]
-#define UTIME_ARG buf
-#endif /* HAVE_UTIMES */
-
-
-    if (!PyArg_ParseTuple(args, "etO:utime",
-                          Py_FileSystemDefaultEncoding, &path, &arg))
-        return NULL;
-    if (arg == Py_None) {
-        /* optional time values not given */
-        Py_BEGIN_ALLOW_THREADS
-        res = utime(path, NULL);
-        Py_END_ALLOW_THREADS
-    }
-    else if (!PyTuple_Check(arg) || PyTuple_Size(arg) != 2) {
-        PyErr_SetString(PyExc_TypeError,
-                        "utime() arg 2 must be a tuple (atime, mtime)");
-        PyMem_Free(path);
-        return NULL;
-    }
-    else {
-        if (extract_time(PyTuple_GET_ITEM(arg, 0),
-                         &atime, &ausec) == -1) {
-            PyMem_Free(path);
-            return NULL;
-        }
-        if (extract_time(PyTuple_GET_ITEM(arg, 1),
-                         &mtime, &musec) == -1) {
-            PyMem_Free(path);
-            return NULL;
-        }
-        ATIME = atime;
-        MTIME = mtime;
-#ifdef HAVE_UTIMES
-        buf[0].tv_usec = ausec;
-        buf[1].tv_usec = musec;
-        Py_BEGIN_ALLOW_THREADS
-        res = utimes(path, buf);
-        Py_END_ALLOW_THREADS
-#else
-        Py_BEGIN_ALLOW_THREADS
-        res = utime(path, UTIME_ARG);
-        Py_END_ALLOW_THREADS
-#endif /* HAVE_UTIMES */
-    }
-    if (res < 0) {
-        return posix_error_with_allocated_filename(path);
-    }
-    PyMem_Free(path);
     Py_INCREF(Py_None);
     return Py_None;
-#undef UTIME_ARG
-#undef ATIME
-#undef MTIME
-#endif /* MS_WINDOWS */
 }
 
 
